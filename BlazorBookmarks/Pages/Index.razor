@inject IFacade facade
@page "/"

<h1 class="text-4xl">Bookmarks</h1>
    <FolderContainer CurrentState="State"
                     SnapShotCallback="SnapShot"
                     UndoCallback="BookmarkUndo"
                     RedoCallback="BookmarkRedo"
                     DeleteBookmarkCallback="BookmarkDelete" />
<div>
    <h2>Features:</h2>
    <ul>
        <li>[X] Organize folders with drag and drop</li>
        <li>[X] Organize bookmarks with drag and drop</li>
        <li>[X] Undo and Redo</li>
        <li>[X] Save between sessions</li>
        <li>[X] Delete Bookmarks</li>
        <li>[ ] Edit bookmark modal</li>
        <li>[ ] Remove old bookmarks (added N months ago)</li>
        <li>[ ] Track created date</li>
        <li>[ ] Remove bookmarks never used (never clicked on)</li>
        <li>[ ] Track last clicked on date</li>
        <li>[ ] Drop URLs from the address bar</li>
        <li>[ ] Drop URLs from the bookmarks bar</li>
        <li>[ ] Import bookmarks from broswer export</li>
        <li>[ ] Export bookmarks to broswer export</li>

    </ul>
    <h2>Bugs to fix:</h2>
    <ul>
        <li>[ ] Moving folders doesn't hide the target folder bookmarks</li>
        <li>[X] Clicking the launch icon on a bookmark launches it twice</li>
    </ul>
</div>
<EditBookmarkModal ShowEditCallback="ShowEdit"/>


@code {
    private StateModelUi State { get; set; }

    protected override void OnInitialized()
    {
        State = MapToStateUi(facade.GetStateFromStore());
        StateHasChanged();
    }

    private void SnapShot()
    {
        facade.Snapshot(MapToState(State));
    }

    private void BookmarkUndo()
    {
        State = MapToStateUi(facade.Undo());
        StateHasChanged();
    }

    private void BookmarkRedo()
    {
        State = MapToStateUi(facade.Redo());
        StateHasChanged();
    }

    private void BookmarkDelete(int id)
    {
        facade.DeleteBookmark(id);
    }

    private void ShowEdit()
    {
        
    }

    private static StateModel MapToState(StateModelUi stateModelUi)
    {
        var folders = stateModelUi.Folders.Select(x => new FolderModel() { Id = x.Id, Name = x.Name, LastUpdated = x.LastUpdated }).ToList();
        var bookmarks = stateModelUi.Bookmarks.Select(x => new BookmarkModel() { Id = x.Id, FolderId = x.FolderId, Name = x.Name, Url = x.Url }).ToList();
        return new StateModel(folders, bookmarks);
    }

    private static StateModelUi MapToStateUi(StateModel stateModel)
    {
        var folders = stateModel.Folders.Select(x => new FolderModelUi() { Id = x.Id, Name = x.Name, LastUpdated = x.LastUpdated }).ToList();
        var bookmarks = stateModel.Bookmarks.Select(x => new BookmarkModelUi() { Id = x.Id, FolderId = x.FolderId, Name = x.Name, Url = x.Url }).ToList();
        return new StateModelUi(folders, bookmarks);
    }
}
