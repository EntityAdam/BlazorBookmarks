@inject IFacade facade
@page "/"

@if (State == null)
{
    <h1>Loading...</h1>
}
else
{
    <FolderContainer CurrentState="State"
                     SnapShotCallback="SnapShot"
                     UndoCallback="Undo"
                     RedoCallback="Redo"/>    
}

<div>
    <h2>Features:</h2>
    <ul>
        <li>[X] Organize folders with drag and drop</li>
        <li>[X] Organize bookmarks with drag and drop</li>
        <li>[X] Undo and Redo</li>
        <li>[X] Save between sessions</li>
        <li>[X] Delete Bookmarks</li>
        <li>[X] Create new folders</li>
        <li>[X] Delete folders</li>
        <li>[X] Edit bookmarks</li>
        <li>[X] BUG: Edit bookmark broken</li>
        <li>[X] Edit Folder Title</li>
        <li>[X] Increment Clicks when using navigation icon</li>
        <li>[ ] BUG: Handle cancel drag with ESC??</li>
        <li>[ ] Track created date</li>
        <li>[X] Increment Clicks when clicking on bookmark</li>
        <li>[X] Open new tab when clicking on bookmark</li>
        <li>[ ] Implement Save without Snapshot for Increment Clicks</li>
        <li>[X] Drop URLs from the address bar</li>
        <li>[X] Drop URLs from the bookmarks bar</li>
        <li>[ ] Dropzone for files shows OnDragEnter, Remove dropzone when switching target folder by moving the target folder id to the FolderContainer</li>
        <li>[ ] Import bookmarks from broswer export</li>
        <li>[ ] Export bookmarks to broswer export</li>
        <li>[ ] Show empy folders flag</li>
        <li>[ ] Grab icon and name from site?</li>
        <li>[X] Bookmarks: truncate long text?</li>
        <li>[ ] UI Settings</li>
        <li>
            Sorting and filtering
            <ul>
                <li>[ ] Sort by most used</li>
                <li>[ ] GROUP by used / not used</li>
                <li>[ ] Highlight duplicates?</li>
                <li>[ ] Remove duplicates but roll up click count</li>
                <li>[ ] Remove old bookmarks (added N months ago)</li>
                <li>[ ] Remove bookmarks never used (never clicked on)</li>
                <li>[ ] Track last clicked on date</li>
            </ul>
        </li>

    </ul>
    <h2>Issues:</h2>
    <ul>
        <li>[ ] UI: Fix left padding on first folder</li>
        <li>[ ] UI: Better Colors</li>
        <li>[ ] UI: Scale up</li>
        <li>[ ] UI: Light / Dark Mode</li>
        <li>[ ] UI: AppBar with settings / GitHub</li>
        <li>[ ] Moving folders doesn't hide the target folder bookmarks</li>
        <li>[ ] Undo when editing a bookmark not working</li>
        <li>[X] Clicking the launch icon on a bookmark launches it twice</li>
        <li>[X] BUG: Bookmark not resizing on folder resize</li>
        <li>[X] BUG: Folder delete icon not moving on folder resize</li>
        <li>[?] BUG: Dragging thin folder over wide folder can cause the elements to flip flop posistions [Partially Resolved by Truncating Bookmark Length</li>
    </ul>
</div>
<EditBookmarkModal/>


@code {
    private StateModelUi State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await facade.GetStateFromStore();
        State = MapToStateUi(state);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SnapShot()
    {
        await facade.Snapshot(MapToState(State));
    }

    //TODO implement save without snapshot to avoid being able to undo things like incrementing clicks
    private async Task SaveWithoutSnapShot()
    {
        await facade.Snapshot(MapToState(State));
    }

    private async Task Undo()
    {
        State = MapToStateUi(await facade.Undo());
        await InvokeAsync(StateHasChanged);
    }

    private async Task Redo()
    {
        State = MapToStateUi(await facade.Redo());
        await InvokeAsync(StateHasChanged);
    }

    private static StateModel MapToState(StateModelUi stateModelUi)
    {
        var folders = stateModelUi.Folders.Select(x => new FolderModel() {Id = x.Id, Name = x.Name, LastUpdated = x.LastUpdated}).ToList();
        var bookmarks = stateModelUi.Bookmarks.Select(x => new BookmarkModel() {Id = x.Id, FolderId = x.FolderId, Name = x.Name, Url = x.Url, Clicks = x.Clicks}).ToList();
        return new StateModel(folders, bookmarks);
    }

    private static StateModelUi MapToStateUi(StateModel stateModel)
    {
        var folders = stateModel.Folders.Select(x => new FolderModelUi() {Id = x.Id, Name = x.Name, LastUpdated = x.LastUpdated}).ToList();
        var bookmarks = stateModel.Bookmarks.Select(x => new BookmarkModelUi() {Id = x.Id, FolderId = x.FolderId, Name = x.Name, Url = x.Url, Clicks = x.Clicks}).ToList();
        return new StateModelUi(folders, bookmarks);
    }

    [JSInvokable]
    public static void Testing(string e)
    {
        var result = e.Replace(System.Environment.NewLine, string.Empty);
    }
}