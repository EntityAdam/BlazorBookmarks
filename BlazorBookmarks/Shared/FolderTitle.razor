@*TODO: Make FolderTitle it's own component
    TODO: Make FolderEdit it's own component*@

@if (IsEditMode)
{
    <div class="flex flex-col flex-grow mb-1 mx-2 w-64 resize-x overflow-auto bg-teal-300" style="flex-basis: auto;">
        <div class="flex items-center space-x-2 px-2 py-1 bg-teal-600">
            <input type="text" class="form-control block text-sm font-normal bg-clip-padding border border-solid border-gray-300 transition ease-in-out m-0 rounded-lg" @bind-value="NewFolderName" placeholder="@FolderName" />
            <input type="button" value="Save" @onclick="Save" class="form-control transition ease-in-out text-sm border-1 px-2 py-2 rounded bg-blue-600 hover:bg-blue-800" />
            <input type="button" value="X" @onclick="Cancel" class="form-control transition ease-in-out text-sm border-1 px-2 py-2 rounded bg-gray-400 hover:bg-gray-500" />
        </div>
    </div>
}
else
{
    <div class="flex items-center justify-between px-2 py-2 bg-teal-600">
        <h3 @onclick="HandleEditFolderTitle" class="border-b-2 text-xl" style="border-color: black;">@FolderName</h3>
        <DeleteIcon Id="@FolderId" IconSize="24" />
    </div>
}

@code {
    [CascadingParameter]
    public FolderContainer Container { get; set; }

    [Parameter]
    public int FolderId { get; set; }

    [Parameter]
    public string FolderName { get; set; }

    public string NewFolderName { get; set; }

    private bool IsEditMode { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
        NewFolderName = FolderName;
        return Task.CompletedTask;
    }

    private void HandleEditFolderTitle()
    {
        //TODO: turn off draggable while in edit mode
        IsEditMode = true;
    }

    private async Task Save()
    {
        await Container.EditFolderTitle(FolderId, NewFolderName);
        await Container.SnapShotCallback.InvokeAsync();
        IsEditMode = false;
    }

    private void Cancel()
    {
        //TODO: restore draggable
        NewFolderName = FolderName;
        IsEditMode = false;
    }
}