@inject NavigationManager navigationManager

<style>
    .edit-svg svg {
        visibility: hidden;
    }

    .edit-svg:hover svg {
        visibility: visible;
    }
</style>

<li class="bg-white text-sm mb-1 shadow rounded px-1 hover:bg-gray-100 edit-svg @IsVisibleCssClass"
    draggable="true"
    dropzone="move"
    @ondragstart:stopPropagation
    @ondragstart="((e) => HandleDragStart(e))"
    @ondragenter="((e) => HandleOnDragEnter())"
    @ondragleave="((e) => HandleOnDragLeave())"
    @ondragover:preventDefault
    @ondragover:stopPropagation
    @ondragover="((e) => HandleDragOver(Model))"
    @ondrop="((e) => HandleDrop())">
    
    <div @onclick="Navigate" class="flex justify-between">
        <p>@Model.Name</p>
        <div class="flex justify-end ml-3">
            <EditIcon BookmarkId="@Model.Id" />
            <NavigateIcon Url="@Model.Url" />
            <DeleteIcon BookmarkId="@Model.Id" DeleteCallback="Delete" />
        </div>
    </div>
</li>

@code {
    [CascadingParameter]
    public FolderContainer Container { get; set; }

    [Parameter] 
    public RenderFragment ChildContent { get; set; }

    [Parameter] 
    public BookmarkModelUi Model { get; set; }

    private void HandleDragStart(DragEventArgs e)
    {
        Container.BookmarkDragPayload = Model;
        Container.BookmarkDragPayload.Hidden = true;
    }

    private void HandleOnDragEnter()
    {
    }

    private void HandleOnDragLeave()
    {
    }

    private void HandleDragOver(BookmarkModelUi target)
    {
        if (Container.BookmarkDragPayload == null)
            return;
        Container.MoveBookmarkPosition(target);
    }

    private void HandleDrop()
    {
        if (Container.BookmarkDragPayload == null)
            return;
        Container.BookmarkDragPayload.Hidden = false;
        Container.BookmarkDragPayload = null;
    }

    private void Navigate()
    {
        //TODO: JS Interop navigate with target="_blank"
        navigationManager.NavigateTo(Model.Url, true);
    }

    private void Delete()
    {
        Container.RemoveBookmark(Model);
    }
    
    private string IsVisibleCssClass => Model.Hidden ? "invisible" : "visible";
}