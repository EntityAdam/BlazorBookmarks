@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<style>
    .edit-svg svg {
        visibility: hidden;
    }

    .edit-svg:hover svg {
        visibility: visible;
    }
</style>

<li class="bg-white text-sm mb-2 shadow-md rounded px-1 hover:bg-gray-200 transition ease-in-out edit-svg cursor-pointer @IsVisibleCssClass"
    draggable="true"
    dropzone="move"
    @ondragstart:stopPropagation
    @ondragstart="((e) => HandleDragStart(e))"
    @ondragenter="((e) => HandleOnDragEnter())"
    @ondragleave="((e) => HandleOnDragLeave())"
    @ondragover="((e) => HandleDragOver(Model))"
    @ondrop="((e) => HandleDrop())"
    @ondrop:preventDefault
    @ondrop:stopPropagation>

    <div @onclick="HandleOnClick" @onclick:preventDefault class="flex justify-between items-center">
        <p class="truncate text-base"><span class="px-2 py-1 text-xs font-bold leading-none text-white transform bg-gray-600 rounded-full" style="line-height:1.6rem;">@Model.Clicks</span> @Model.Name</p>
        <div class="flex space-x-1">
            <EditIcon BookmarkId="@Model.Id" />
            <NavigateIcon BookmarkId="@Model.Id" Url="@Model.Url" />
            <DeleteIcon Id="@Model.Id" DeleteCallback="Delete" />
        </div>
    </div>
</li>

@code {

    private string IsVisibleCssClass => Model.Hidden ? "invisible" : "visible";

    [CascadingParameter]
    public FolderContainer Container { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public BookmarkModelUi Model { get; set; }

    private void HandleDragStart(DragEventArgs e)
    {
        Console.WriteLine("Firing HandleDragStart");
        Container.BookmarkDragPayload = Model;
        Container.BookmarkDragPayload.Hidden = true;
    }

    private void HandleOnDragEnter()
    {
    }

    private void HandleOnDragLeave()
    {

    }

    private async Task HandleDragOver(BookmarkModelUi target)
    {
        Console.WriteLine("Firing Bookmark HandleDragOver");
        if (Container.BookmarkDragPayload is not null)
        {
            await Container.MoveBookmarkPosition(target);
        }
        if (Container.FolderDragPayload is not null)
        {
            //dragging a folder, do nothing
            return;
        }
        else
        {
            //this could be anything being dragged over
            //todo adding bookmarks
            //await Container.InsertNewBookmarkAtPosition(target);
        }
    }

    private void HandleDrop()
    {
        Console.WriteLine("Firing HandleDrop Bookmark");
        if (Container.BookmarkDragPayload == null)
            return;
        Container.BookmarkDragPayload.Hidden = false;
        Container.BookmarkDragPayload = null;
    }

    private async Task HandleOnClick()
    {
        //supporting navigation for now, may want to do other things like multi-select
        await Container.IncrementClicks(Model.Id);
        await NavigateInNewTab(Model.Url);
    }

    private async Task NavigateInNewTab(string url)
    {
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task Delete()
    {
        await Container.RemoveBookmark(Model);
    }

}