<div class="flex flex-col flex-grow mb-1 mx-2 w-64 resize-x overflow-auto bg-teal-300" style="flex-basis: auto;"
     draggable="true"
     dropzone="move"
     @ondragstart="((e) => HandleDragStart(FolderModel))"
     @ondragenter="((e) => HandleOnDragEnter())"
     @ondragleave="((e) => HandleOnDragLeave())"
     @ondragover="((e) => HandleDragOver(FolderModel))"
     @ondragover:preventDefault
     @ondrop="((e) => HandleDrop(FolderModel))"
     @ondrop:stopPropagation>
    <div class="@IsVisibleCssClass()" style="position:relative">
        <FolderTitle FolderId="@FolderModel.Id" FolderName="@FolderModel.Name" />
        <FolderDragBox FolderId="@FolderModel.Id" Visible="@ShowFolderDragBox" />
        <ul class="px-3 py-5" style="pointer-events:auto">
            @**TODO: This is extremely slow at more than 400 bookmarks*@
            @foreach (var bookmark in FolderContainer.CurrentState.Bookmarks.Where(x => x.FolderId == FolderModel.Id))
            {
                <Bookmark Model="@bookmark" />
            }
        </ul>
    </div>
</div>



@code {

    [CascadingParameter] public FolderContainer FolderContainer { get; set; }

    [Parameter] public FolderModelUi FolderModel { get; set; }

    [Parameter] public bool ShowFolderDragBox { get; set; } = false;

    private string IsVisibleCssClass() => FolderModel.Hidden ? "invisible" : "visible";

    private async Task Delete()
    {
        await FolderContainer.DeleteFolder(FolderModel.Id);
    }

    private void HandleDragStart(FolderModelUi selectedCollection)
    {
        FolderContainer.FolderDragPayload = selectedCollection;
        FolderContainer.FolderDragPayload.Hidden = true;
    }

    private void HandleOnDragEnter()
    {

    }

    private void HandleOnDragLeave()
    {
        Console.WriteLine("Firing Folder HandleOnDragLeave");
    }

    private async Task HandleDragOver(FolderModelUi folderModelUi)
    {
        Console.WriteLine("Firing Folder HandleDragOver");

        if (FolderContainer.FolderDragPayload is null && FolderContainer.BookmarkDragPayload is null)
        {
            FolderContainer.SetFolderDragBoxTarget(FolderModel.Id);
        }
        else
        {
            if (FolderContainer.FolderDragPayload != null)
            {
                if (FolderContainer.FolderDragPayload == folderModelUi)
                {
                    return;
                }
                else
                {
                    await FolderContainer.MoveFolderPosition(folderModelUi.Id, FolderContainer.FolderDragPayload);
                }
            }

            if (FolderContainer.BookmarkDragPayload != null)
            {
                await FolderContainer.MoveBookmarkToFolder(folderModelUi);
            }
        }
    }

    private async Task HandleDrop(FolderModelUi dropTarget)
    {
        Console.WriteLine("Firing HandleDrop Folder");

        if (ShowFolderDragBox)
        {
            FolderContainer.ClearFolderDragBoxTarget();
        }

        if (FolderContainer.FolderDragPayload != null)
        {
            FolderContainer.FolderDragPayload.Hidden = false;
            FolderContainer.FolderDragPayload = null;
            await FolderContainer.SnapShotCallback.InvokeAsync();
        }

        if (FolderContainer.BookmarkDragPayload != null)
        {
            FolderContainer.BookmarkDragPayload.Hidden = false;
            FolderContainer.BookmarkDragPayload = null;
            await FolderContainer.SnapShotCallback.InvokeAsync();
        }
    }
}
