<div class="flex flex-col flex-grow mb-1 mx-2 resize-x overflow-auto bg-indigo-100" style="flex-basis: auto;"
     draggable="true"
     dropzone="move"
     @ondragstart="((e) => HandleDragStart(Model))"
     @ondragenter="((e) => HandleOnDragEnter())"
     @ondragleave="((e) => HandleOnDragLeave())"
     @ondragover:preventDefault
     @ondragover="((e) => HandleDragOver(Model))"
     @ondrop="((e) => HandleDrop(Model))">

    <!--<div class="@IsVisibleCssClass" style="pointer-events:none;">-->
    <div class="@IsVisibleCssClass">
        <div class="flex justify-between">
            <FolderTitle FolderId="@Model.Id" FolderName="@Model.Name"/>
            <DeleteIcon Id="@Model.Id" DeleteCallback="Delete" />
        </div>
        <ul class="px-2 py-5" style="pointer-events:auto">
            @foreach (var b in Container.CurrentState.Bookmarks.Where(x => x.FolderId == Model.Id))
            {
                <Bookmark Model="@b" />
            }
        </ul>
    </div>
</div>



@code {
    [CascadingParameter]
    public FolderContainer Container { get; set; }

    [Parameter]
    public FolderModelUi Model { get; set; }

    private string IsVisibleCssClass => Model.Hidden ? "invisible" : "visible";

    private async Task Delete()
    {
        await Container.DeleteFolder(Model.Id);
    }
    
    private void HandleEditFolderTitle()
    {
        Console.WriteLine("Edit Folder Title");
    }

    private void HandleDragStart(FolderModelUi selectedCollection)
    {
        Container.FolderDragPayload = selectedCollection;
        Container.FolderDragPayload.Hidden = true;
    }

    private void HandleOnDragEnter()
    {
    }

    private void HandleOnDragLeave()
    {
    }

    private async Task HandleDragOver(FolderModelUi collection)
    {
        if (Container.FolderDragPayload != null)
        {
            await Container.MoveFolderPosition(collection.Id, Container.FolderDragPayload);
        }

        if (Container.BookmarkDragPayload != null)
        {
            await Container.MoveBookmarkToFolder(collection);
        }
    }

    private async Task HandleDrop(FolderModelUi dropTarget)
    {
        if (Container.FolderDragPayload != null)
        {
            Container.FolderDragPayload.Hidden = false;
            Container.FolderDragPayload = null;
            await Container.SnapShotCallback.InvokeAsync();
        }

        if (Container.BookmarkDragPayload != null)
        {
            Container.BookmarkDragPayload.Hidden = false;
            Container.BookmarkDragPayload = null;
            await Container.SnapShotCallback.InvokeAsync();
        }
    }

    [JSInvokable]
    public static void UrlDrop(string url)
    {
        var result = url.Replace(System.Environment.NewLine, string.Empty);
    }
}
