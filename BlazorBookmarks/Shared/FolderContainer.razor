@inject NavigationManager navigationManager
@inject IFacade facade

<div class="flex py-2 px-2 bg-gray-200"
     tabindex="1"
     @onkeypress="((e) => HandleKeyPress(e))"
     @onkeypress:preventDefault>
    <CascadingValue Value="@this">
        @foreach (var folder in CurrentState.Folders)
        {
            <Folder ThisFolder="@folder" />
        }
    </CascadingValue>
</div>

@code {
    [Parameter]
    public StateModelUi CurrentState { get; set; }

    [Parameter]
    public EventCallback SnapShotCallback { get; set; }

    [Parameter]
    public EventCallback UndoCallback { get; set; }

    [Parameter]
    public EventCallback RedoCallback { get; set; }

    public FolderModelUi CollectionPayload { get; set; }
    public FolderModelUi IsOverCollection { get; set; }
    public BookmarkModelUi LinkPayload { get; set; }

    public void MoveCollectionTo(int targetId, FolderModelUi item)
    {
        var index = CurrentState.Folders.FindIndex(x => x.Id == targetId);
        if (index >= 0)
        {
            CurrentState.Folders.RemoveAll(x => x.Id == CollectionPayload.Id);
            CurrentState.Folders.Insert(index, item);
        }
        StateHasChanged();
    }

    public void MoveLinkPayloadTo(BookmarkModelUi target)
    {
        LinkPayload.FolderId = target.FolderId;
        var index = CurrentState.Bookmarks.FindIndex(x => x == target);
        if (index >= 0)
        {
            CurrentState.Bookmarks.RemoveAll(x => x == LinkPayload);
            CurrentState.Bookmarks.Insert(index, LinkPayload);
        }
        StateHasChanged();
    }

    public void MoveLinkPayloadTo(FolderModelUi target)
    {
        LinkPayload.FolderId = target.Id;
        StateHasChanged();
    }

    public void Navigate(BookmarkModelUi linkToNavigate)
    {
        navigationManager.NavigateTo(linkToNavigate.Url, true);
    }

    public void Remove(BookmarkModelUi linkToDelete)
    {
        CurrentState.Bookmarks.RemoveAll(x => x == linkToDelete);
        StateHasChanged();
    }

    public void HandleKeyPress(KeyboardEventArgs e)
    {
        var keys = e;
        if (e.CtrlKey)
        {
            if (e.Code == "KeyZ")
            {
                UndoCallback.InvokeAsync().Wait();
            }
            else if (e.Code == "KeyY")
            {
                RedoCallback.InvokeAsync().Wait();
            }
        }
    }
}
