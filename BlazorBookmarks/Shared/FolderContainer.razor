@inject NavigationManager navigationManager
@inject IFacade facade

<div class="flex py-2 px-2 bg-gray-200"
     tabindex="1"
     @onkeypress="((e) => HandleKeyPress(e))"
     @onkeypress:preventDefault>
    <CascadingValue Value="@this">
        @foreach (var folder in CurrentState.Folders)
        {
            <Folder ThisFolder="@folder" />
        }
    </CascadingValue>
</div>

@code {
    [Parameter]
    public StateModelUi CurrentState { get; set; }

    [Parameter]
    public EventCallback SnapShotCallback { get; set; }

    [Parameter]
    public EventCallback UndoCallback { get; set; }

    [Parameter]
    public EventCallback RedoCallback { get; set; }

    [Parameter]
    public EventCallback<int> DeleteBookmarkCallback { get; set; }

    public FolderModelUi FolderDragPayload { get; set; }

    public BookmarkModelUi BookmarkDragPayload { get; set; }

    public void MoveFolderPosition(int dragTargetFolderId, FolderModelUi folderDragPayload)
    {
        var dragTargetIndex = CurrentState.Folders.FindIndex(x => x.Id == dragTargetFolderId);
        if (dragTargetIndex >= 0)
        {
            CurrentState.Folders.RemoveAll(x => x.Id == FolderDragPayload.Id);
            CurrentState.Folders.Insert(dragTargetIndex, folderDragPayload);
        }
        StateHasChanged();
    }

    public void MoveBookmarkPosition(BookmarkModelUi dragTargetBookmark)
    {
        BookmarkDragPayload.FolderId = dragTargetBookmark.FolderId;
        var index = CurrentState.Bookmarks.FindIndex(x => x == dragTargetBookmark);
        if (index >= 0)
        {
            CurrentState.Bookmarks.RemoveAll(x => x == BookmarkDragPayload);
            CurrentState.Bookmarks.Insert(index, BookmarkDragPayload);
        }
        StateHasChanged();
    }

    public void MoveBookmarkToFolder(FolderModelUi target)
    {
        BookmarkDragPayload.FolderId = target.Id;
        StateHasChanged();
    }

    public void RemoveBookmark(BookmarkModelUi linkToDelete)
    {
        CurrentState.Bookmarks.RemoveAll(x => x == linkToDelete);
        SnapShotCallback.InvokeAsync().Wait();
        StateHasChanged();
    }

    public void Navigate(BookmarkModelUi linkToNavigate)
    {
        navigationManager.NavigateTo(linkToNavigate.Url, true);
    }

    public void HandleKeyPress(KeyboardEventArgs e)
    {
        var keys = e;
        if (e.CtrlKey)
        {
            if (e.Code == "KeyZ")
            {
                UndoCallback.InvokeAsync().Wait();
            }
            else if (e.Code == "KeyY")
            {
                RedoCallback.InvokeAsync().Wait();
            }
        }
    }
}