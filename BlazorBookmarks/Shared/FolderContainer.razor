@inject NavigationManager navigationManager
@inject IFacade facade

@if (IsEditMode)
{
    <CascadingValue Value="@this">
        <EditBookmark/>
    </CascadingValue>
}
else
{
    <!-- removed @onkeypress:preventDefault, this blocked child <input/> elements -->
    <div class="flex flex-wrap items-baseline bg-black"
         tabindex="1"
         @onkeypress="((e) => HandleKeyPress(e))">
        <CascadingValue Value="@this">
            @foreach (var folder in CurrentState.Folders)
            {
                <Folder Model="@folder"/>
            }
            <Addfolder/>
        </CascadingValue>
    </div>
}




@code {

    [Parameter]
    public StateModelUi CurrentState { get; set; }

    [Parameter]
    public EventCallback SnapShotCallback { get; set; }

    [Parameter]
    public EventCallback UndoCallback { get; set; }

    [Parameter]
    public EventCallback RedoCallback { get; set; }

    public FolderModelUi FolderDragPayload { get; set; }

    public BookmarkModelUi BookmarkDragPayload { get; set; }

    private bool IsEditMode { get; set; } = false;

    public async Task AddFolder(string folderName)
    {
        var folder = await facade.AddFolder(folderName);
        var folderModelUi = new FolderModelUi() {Id = folder.Id, LastUpdated = folder.LastUpdated, Name = folder.Name, Hidden = false};
        CurrentState.Folders.Add(folderModelUi);
        await SnapShotCallback.InvokeAsync();
        await InvokeAsync(StateHasChanged);
    }

    public async Task MoveFolderPosition(int dragTargetFolderId, FolderModelUi folderDragPayload)
    {
        var dragTargetIndex = CurrentState.Folders.FindIndex(x => x.Id == dragTargetFolderId);
        if (dragTargetIndex >= 0)
        {
            CurrentState.Folders.RemoveAll(x => x.Id == FolderDragPayload.Id);
            CurrentState.Folders.Insert(dragTargetIndex, folderDragPayload);
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task MoveBookmarkPosition(BookmarkModelUi dragTargetBookmark)
    {
        BookmarkDragPayload.FolderId = dragTargetBookmark.FolderId;
        var index = CurrentState.Bookmarks.FindIndex(x => x == dragTargetBookmark);
        if (index >= 0)
        {
            CurrentState.Bookmarks.RemoveAll(x => x == BookmarkDragPayload);
            CurrentState.Bookmarks.Insert(index, BookmarkDragPayload);
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task MoveBookmarkToFolder(FolderModelUi target)
    {
        BookmarkDragPayload.FolderId = target.Id;
        await InvokeAsync(StateHasChanged);
    }

    public async Task RemoveBookmark(BookmarkModelUi linkToDelete)
    {
        CurrentState.Bookmarks.RemoveAll(x => x == linkToDelete);
        await SnapShotCallback.InvokeAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void Navigate(BookmarkModelUi linkToNavigate)
    {
        navigationManager.NavigateTo(linkToNavigate.Url, true);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        var keys = e;
        if (e.CtrlKey)
        {
            if (e.Code == "KeyZ")
            {
                UndoCallback.InvokeAsync().Wait();
            }
            else if (e.Code == "KeyY")
            {
                RedoCallback.InvokeAsync().Wait();
            }
        }
    }

    public async Task EditBookmark(int bookmarkId)
    {
        IsEditMode = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task CancelEdit()
    {
        IsEditMode = false;
        await InvokeAsync(StateHasChanged);
    }
}